[
    {sasl, [{utc_log, true}]}, 

    %% {size, 10485760}, {date, "$D0"}, {count, 5} -> This tells lager to log error and above messages to error.log and to rotate the file at midnight or when it reaches 10mb, whichever comes first, and to keep 5 rotated logs in addition to the current one

    {lager, [
      {colored, true}, 
      {log_root, "/tmp/log/cdapbroker"},

      %%Any logs just starting with lager: will go into stdout and cdapbroker.log. These are the default for non-EELF caught logs
      {handlers, 
          [
            {lager_console_backend, info},
            {lager_file_backend, [{file, "cdapbroker.log"}, 
                                  {level, debug}, 
                                  {formatter, lager_default_formatter}, 
                                  {size, 10485760}, 
                                  {date, "$D0"}, 
                                  {count, 5},
                                  %% Message will hold the delimited fields that the logging standard actually wants
                                  {formatter_config, [message, "--", module ,":", function, ":", line, "\n"]}
            ]}
          ]
      },
      %%EELF logs have special sink names: error:, audit:, metrics:, and optionally debug:
      %%these sinks will log to their respective files, and for sanity reasons, stdout as well
      {extra_sinks,
           [
            {audit_lager_event,
              [{handlers,
                [
                  {lager_console_backend, debug},
                  {lager_file_backend,
                    [{file, "audit.log"},
                     %regarding level, we want the lowest becaue audit:anything will show up in audit.log
                     {level, debug},
                     {formatter, lager_default_formatter}, 
                     {size, 10485760}, 
                     {date, "$D0"}, 
                     {count, 5},
                     %% Message will hold the delimited fields that the logging standard actually wants
                     {formatter_config, [message, "--", module ,":", function, ":", line, "\n"]}]
                  }
                ]
             }]
            },
            {metrics_lager_event,
              [{handlers,
                [
                  {lager_console_backend, debug},
                  {lager_file_backend,
                    [{file, "metrics.log"},
                     %regarding level, we want the lowest becaue metrics:anything will show up in metrics.log
                     {level, debug},
                     {formatter, lager_default_formatter}, 
                     {size, 10485760}, 
                     {date, "$D0"}, 
                     {count, 5},
                     %% Message will hold the delimited fields that the logging standard actually wants
                     {formatter_config, [message, "--", module ,":", function, ":", line, "\n"]}]
                  }
                ]
             }]
            },
            {error_lager_event,
              [{handlers,
                [
                  {lager_console_backend, debug},
                  {lager_file_backend,
                    [{file, "error.log"},
                     %regarding level, we want the lowest becaue error:anything will show up in error.log
                     {level, debug},
                     {formatter, lager_default_formatter}, 
                     {size, 10485760}, 
                     {date, "$D0"}, 
                     {count, 5},
                     %% Message will hold the delimited fields that the logging standard actually wants
                     {formatter_config, [message, "--", " [",severity,"] ", module ,":", function, ":", line, "\n"]}]
                  }
                ]
             }]
            }
           ]
      }
  ]}
].
